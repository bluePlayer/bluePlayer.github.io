window.SI.namespace('GameOverScreen', window.SI.Screen, ( function(si) {        'use strict';        var thisObject = null,            gameObject = null,            gameOverBgSprite = null,            gameCompleteSound = null,            youScoredTextField = null,            finalResultTextField = null,            waveTextField = null,            scoreTextField = null,            errorsTextField = null,            pointsArrayTextField = null,            errorsArrayTextField = null,            helpButton = null,            resetButton = null,            resetGameButton = null,            cancelButton = null,            resetWindow = null;        return {            init : function() {                gameObject = si.gameObject;                thisObject = this;                gameObject.sound.stopAll();                gameCompleteSound = si.gameObject.add.audio(si.SoundAssetKeys.GAME_COMPLETE_SOUND);                thisObject.gameObjects = gameObject.add.group();                thisObject.menuObjects = gameObject.add.group();            },            create : function() {                gameCompleteSound.play();                gameOverBgSprite = gameObject.add.sprite(0, 0, si.ImageAssetKeys.BGS_SHEET_ATLAS, "gameOverBg.png");                thisObject.gameObjects.add(gameOverBgSprite);                waveTextField = gameObject.add.text(100, 150, "", si.Utility.getTextStyle17());                waveTextField.text = "Waves/Rules: " + si.Const.WAVES_COUNT + "/" + si.Const.MAX_NUM_OF_RULES;                thisObject.gameObjects.add(waveTextField);                scoreTextField = gameObject.add.text(100, 200, si.generateScoreText(), si.Utility.getTextStyle17());                thisObject.gameObjects.add(scoreTextField);                errorsTextField = gameObject.add.text(100, 250, si.generateErrorsText(), si.Utility.getTextStyle17());                thisObject.gameObjects.add(errorsTextField);                finalResultTextField = gameObject.add.text(100, 300, 'Final result: ' + thisObject.calcWinRate() + "%", si.Utility.getTextStyle17());                thisObject.gameObjects.add(finalResultTextField);                pointsArrayTextField = gameObject.add.text(20, 350, "Points: " + JSON.stringify(si.getWavePointsArray()), si.Utility.getTextStyle12());                pointsArrayTextField.visible = false;                thisObject.gameObjects.add(pointsArrayTextField);                errorsArrayTextField = gameObject.add.text(20, 400, "Errors: " + JSON.stringify(si.getWaveErrorsArray()), si.Utility.getTextStyle12());                errorsArrayTextField.visible = false;                thisObject.gameObjects.add(errorsArrayTextField);                helpButton = si.GoToScreen.Button(si.HelpScreen.KEY, [thisObject.gameObjects, thisObject.menuObjects], 175, 600,                                                    si.ImageAssetKeys.STANDARD_BUTTONS_SHEET, thisObject, null, null, null, null, 7, 6, 6, 7);                thisObject.menuObjects.add(helpButton);                resetButton = si.SIButton.SIButton(175, 650, si.ImageAssetKeys.STANDARD_BUTTONS_SHEET, thisObject, thisObject.showResetWindow,                                                        null, null, null, null, null, null, 11, 10, 10, 11);                thisObject.menuObjects.add(resetButton);                resetWindow = gameObject.add.sprite(75, 300, si.ImageAssetKeys.OTHER_GUI_ASSETS_ATLAS, 'resetWindow.png');                resetWindow.visible = false;                thisObject.menuObjects.add(resetWindow);                resetGameButton = si.SIButton.SIButton(85, 385, si.ImageAssetKeys.STANDARD_BUTTONS_SHEET, thisObject, thisObject.resetGame,                                                        null, null, null, null, null, null, 11, 10, 10, 11);                resetGameButton.visible = false;                thisObject.menuObjects.add(resetGameButton);                cancelButton = si.SIButton.SIButton(255, 385, si.ImageAssetKeys.STANDARD_BUTTONS_SHEET, thisObject, thisObject.closeResetWindow,                                                        null, null, null, null, null, null, 29, 28, 28, 29);                cancelButton.visible = false;                thisObject.menuObjects.add(cancelButton);                gameObject.world.bringToTop(thisObject.menuObjects);                si.Utility.fadeInGroup(thisObject.gameObjects);            },            calcWinRate: function () {                return Math.round(((si.updateScore() * 100) / si.Const.MAX_NUM_OF_POINTS) * 100 / 100);            },            showResetWindow : function() {                resetWindow.visible = true;                cancelButton.visible = true;                resetGameButton.visible = true;                resetButton.visible = false;            },            closeResetWindow : function() {                resetWindow.visible = false;                cancelButton.visible = false;                resetGameButton.visible = false;                resetButton.visible = true;            },            resetGame : function() {                si.resetGame();                si.Utility.fadeOutGroup(thisObject.gameObjects);                si.Utility.fadeOutGroup(thisObject.menuObjects).onComplete.add(function() {                    var siTweenObject = this;                    siTweenObject.gameObject.state.start(siTweenObject.GameScreen.KEY);                    siTweenObject.gameObject.state.clearCurrentState();                }, si);            }        };    }(window.SI)));